# -*- coding: utf-8 -*-
"""Homework 2 Kyle Arbide

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GhyNsIBX1YQje59AHNc4qmEGQqgNtboU
"""

# Entering the Student database in Normalized Form

# Student Table

student_table = [
                    {'name':'john doe','id': 12345, 'major':["Math"]},
                     {'name':'jane doe','id': 44444, 'major':["English"]},
                    {'name':'moe doe','id': 45674, 'major':["English",'Math']}
]

# Course

course_table = [
               {'course':"ENG1", 'title':"English One", 'professor':['Dr. Thomas']},
                {'course':'ENG2', 'title':"English Two", 'professor':['Dr. Jenna']},
                {'course':'MTH1', 'title':"Math One", 'professor':['Prof. Smith']},
               {'course':'MTH2', 'title':"Math Two", 'professor':['Prof. Jones']}
]
print(course_table)

# Address

address_table = [
                {'id':12345, 'address': [ {'street':'123 E St', 'city':"Miami", 'zip':33146}]},
                {'id':44444, 'address': [ {'street':'36 K St', 'city':"Washington", 'zip':20037}]},
                {'id':45674, 'address': [ {'street':'300 W St', 'city':"Washington", 'zip':20037}]}
                
]

# departments
departments_table = [
                    {'deptname': "Math", 'depthead':'Dr. Numbers', 'address': [ {'street':'300 T St', 'city':"Washington", 'zip':20037}]},
                    {'deptname': "English", 'depthead':'Dr. Alphabet', 'address': [ {'street':'576 Z Ct', 'city':"Washington", 'zip':20037}]}
]

# enrollment
enrollment_table = [
                    {'id':12345, 'courses':['MTH1','MTH2'],'semester':'Fall 2021'},
                    {'id':44444, 'courses':['ENG1','ENG2'],'semester':'Fall 2021'},
                    {'id':45674, 'courses':['MTH1','ENG1'],'semester':'Fall 2021'}
]
# I believe this should be all the tables in normalized form

student_records = list(student_table)
print(student_records)

# Student Records
student_records = list(student_table)
def denormalize_student(table):
  for i in table:
    for y in enrollment_table:
      if i["id"] == y["id"]:
        i.update(y)
    for x in address_table:
      if i['id'] == x['id']:
        i.update(x)


denormalize_student(student_records)
print(student_records)

# Enrollement
course_records = list(course_table) # for some reason this is still making this a reference and not its own list. So when changes are made in here they affect the initial table too which is annoying but I dont know how to fix
def denormalize_course(table):
  for i in table:
      for x in enrollment_table:
        if i['course'] in x['courses']:
          if "student_ids" in i:
            i["student_ids"].append(x["id"])
          else:
            i.update({"student_ids":[x["id"]]})

denormalize_course(course_records)
print(course_records)
print(course_table)

# re-loading in the student table because of the reference issue mentioned above

student_table = [
                    {'name':'john doe','id': 12345, 'major':["Math"]},
                     {'name':'jane doe','id': 44444, 'major':["English"]},
                    {'name':'moe doe','id': 45674, 'major':["English",'Math']}
]

# Washington DC Students

def denormalize_location(table,city):
  for i in table:
    for x in i["address"]:
      if x['city'] == city:
        for y in student_table:
          if y["id"] == i["id"]:
            i.update(y)
      else:
        table.remove(i)

denormalize_location(address_table,"Washington")

print(address_table)

# Normalize again
# Student Records
new_students_record = []
new_addresses_record = []
def normalize_student(table):
  student_record_keys = ['name','major']
  address_keys = ['address']
  for k in student_records:
    for i in k:
        if i == 'id':
          new_students_record.append({i:k[i]})
          new_addresses_record.append({i:k[i]})
  for k in student_records:
    for i in student_record_keys:
      for z in new_students_record:
        if i in k: 
          z[i] = k[i]
    for y in address_keys:
      for x in new_addresses_record:
        if y in k:
          x[y] = k[y]

normalize_student(student_records)
print(new_students_record)
print(new_addresses_record)

import json

with open('data.json', 'w') as fp:
    json.dump(student_records, fp)

f = open('data.json')
data = json.load(f)
data



"""Below is how this was solved in class

"""

!pip install faker
from faker import Faker
fake = Faker()
fake.name()

from uuid import uuid4

class Student():
  id = None
  name = None
  major = 'undecided'

student_list = {}
for _ in range(100):
  s = Student()
  s.id=uuid4() 
  s.name = fake.name()
  student_list[s.id] = s