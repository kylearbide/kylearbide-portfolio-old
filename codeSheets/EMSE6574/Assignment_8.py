# -*- coding: utf-8 -*-
"""DiamondRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NPXMsi1hxVlY2f0dRGNVwuoMmMSaeFWP
"""

import pandas as pd

df = pd.read_csv("diamonds.csv")
df.head()

cuts = {'Ideal': 0,'Premium': 1, 'Very Good': 2, "Good": 3, "Fair":4}
colors = dict(zip('DEFGHIJ',range(7)))
clarity = {'SI2':5, 'SI1':4, 'VS1':2, 'VS2':3, 'VVS2':1, 'VVS1':0, 'I1':6, 'IF':7}

df['cut_n'] = df['cut'].apply(lambda x: cuts[x])
df['color_n'] = df['color'].apply(lambda x: colors[x])
df['clarity_n'] = df['clarity'].apply(lambda x: clarity[x])

X = df[["depth","table", 'carat','cut_n','color_n','clarity_n']]
Y = df['price']

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33)

from sklearn import linear_model
reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))

coef = reg.coef_
intercept = reg.intercept_
print(coef)
print(intercept)

pred = pd.DataFrame(reg.predict(X_test))
Y_test_df = pd.DataFrame(Y_test)
Y_test_df.reset_index(drop = True, inplace= True)
comparison = pd.concat([Y_test_df,pred], axis = 1) 
comparison

pred2 = reg.predict(X_test)
err = pd.Series(Y_test) - [p[0]for p in pred2]

err.hist(bins=100)
#errors are normally distributed and symetrical

err.describe()

import statistics as stats
def rmse(errors):
  return(pow(stats.mean([pow(e,2) for e in errors]),0.5))

rmse(err)

#Lets Repeat but with only the four C's

X = df[['carat','cut_n','color_n','clarity_n']]
Y = df['price']

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33)
reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))

coef = reg.coef_
intercept = reg.intercept_
print(coef)
print(intercept)

pred = pd.DataFrame(reg.predict(X_test))
Y_test_df = pd.DataFrame(Y_test)
Y_test_df.reset_index(drop = True, inplace= True)
comparison = pd.concat([Y_test_df,pred], axis = 1)
comparison

pred2 = reg.predict(X_test)
err = pd.Series(Y_test) - [p[0]for p in pred2]
err.hist(bins=100)

rmse(err)

#now with get dummies?

colors = pd.get_dummies(df.color, prefix="Color", dtype="int")
cuts = pd.get_dummies(df.cut, prefix = "Cut", dtype="int")
clarities = pd.get_dummies(df.clarity, prefix = "Clarity", dtype="int")
main = colors.merge(cuts, how = "inner", left_index=True,right_index=True)
main = main.merge(clarities, how = "inner", left_index=True,right_index=True)

df_dummies = df.drop(columns= ["cut",	"color",	"clarity",	"depth",	"table", "x"	,"y"	,"z", "cut_n",	"color_n",	"clarity_n"])

df_dummies = df_dummies.merge(main, how = "inner", left_index = True, right_index = True)

X = df_dummies.drop(columns = ["Unnamed: 0", "price"])
Y = df_dummies['price']

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33)

reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))

pred2 = reg.predict(X_test)
err = pd.Series(Y_test) - [p[0]for p in pred2]
err.hist(bins=100)

rmse(err)

#lower error with get dummies