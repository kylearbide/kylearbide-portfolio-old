# -*- coding: utf-8 -*-
"""Rolling Average Analysis and Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FUoHxfA2RJNnX0eRoM_meXAnYGtSC3jQ
"""

!pip install yfinance
import pandas_datareader as web
from pandas_datareader import data as pdr
import yfinance as yfin
yfin.pdr_override()

import pandas as pd
import numpy as np
import datetime as dt

BTC = pdr.get_data_yahoo("BTC-USD", start="2014-01-01", end="2021-10-31")
ETH = pdr.get_data_yahoo("ETH-USD", start="2014-01-01", end="2021-10-31")
DOGE = pdr.get_data_yahoo("DOGE-USD", start="2014-01-01", end="2021-10-31")
SP5 = pdr.get_data_yahoo("^GSPC", start="2014-01-01", end="2021-10-31")
BTC.reset_index(level=0, inplace=True)
ETH.reset_index(level=0, inplace=True)
DOGE.reset_index(level=0, inplace=True)
SP5.reset_index(level=0, inplace=True)

Merged = SP5.merge(ETH, how = 'outer', on = "Date")
Merged = Merged.merge(DOGE, how = 'outer', on = "Date")
Merged = Merged.merge(BTC, how = 'outer', on = "Date")

Merged.columns = ["Date","Open_SP5",	'High_SP5'	,'Low_SP5',	'Close_SP5',	'Adj_Close_SP5','Volume_SP5',"Open_ETH",	'High_ETH'	,'Low_ETH',	'Close_ETH',	'Adj_Close_ETH','Volume_ETH',"Open_DOGE",	'High_DOGE'	,'Low_DOGE',	'Close_DOGE',	'Adj_Close_DOGE','Volume_BTC',"Open_BTC",	'High_BTC'	,'Low_BTC',	'Close_BTC',	'Adj_Close_BTC','Volume_BTC']

BTC2=BTC.copy()
ETH2=ETH.copy()
DOGE2=DOGE.copy()
SP52=SP5.copy()

BTC2['asset']='BTC'
ETH2['asset']='ETH'
DOGE2['asset']='DOGE'
SP52['asset']='SP5'

Merged2 = SP52.append(ETH2, ignore_index=True)
Merged2 = Merged2.append(DOGE2, ignore_index=True)
Merged2=Merged2.append(BTC2, ignore_index=True)

Merged2['delta']=(Merged2['Close']-Merged2['Open'])/Merged2['Open']
piv_m2= Merged2.pivot(index='Date', columns='asset',values='delta')

c1_col=['Adj_Close_SP5','Adj_Close_ETH','Adj_Close_DOGE','Adj_Close_BTC']

c1=Merged[c1_col]

#SP5["pctChange"] = (SP5["Adj Close"].pct_change())*100

#SP5["Weekday"] = SP5["Date"].dt.day_name()

#SP5Weekly = SP5.loc[SP5["Weekday"]=="Monday"]

def WeeklyOutputs(data):
  data["Weekday"] = data["Date"].dt.day_name()
  weekly = data.loc[data["Weekday"]=="Monday"]
  weekly["change"] = (weekly["Adj Close"].pct_change())*100
  weekly.drop(["High","Low","Close","Volume","Weekday"], axis=1, inplace = True)
  return(weekly)

SP5Weekly = WeeklyOutputs(SP5)
BTCWeekly = WeeklyOutputs(BTC)
DOGEWeekly = WeeklyOutputs(DOGE)
ETHWeekly = WeeklyOutputs(ETH)

stdSP5_W = SP5Weekly['change'].std()
stdBTC_W = BTCWeekly['change'].std()
stdDOGE_W = DOGEWeekly['change'].std()
stdETH_W = ETHWeekly['change'].std()

def findBIGDROPS(data,stdDev):
  boundary = -2*stdDev
  drops = data.loc[data["change"] < boundary]
  dates = drops["Date"].tolist()
  return(drops,dates)

SP5drops,SP5Dates = findBIGDROPS(SP5Weekly,stdSP5_W)

def nextTwoWeeks(dates):
  newdates = []
  for x in dates:
    newdates.append(x)
    newdates.append(x+dt.timedelta(days=7))
    newdates.append(x+dt.timedelta(days=14))
  newBTC = BTCWeekly[BTCWeekly["Date"].isin(newdates)]
  newDOGE = DOGEWeekly[DOGEWeekly["Date"].isin(newdates)]
  newETH = ETHWeekly[ETHWeekly["Date"].isin(newdates)]
  newSP5 = SP5Weekly[SP5Weekly["Date"].isin(newdates)]
  final = newBTC.merge(newDOGE, on = "Date", how = "outer")
  final = final.merge(newETH, on = "Date", how = "outer")
  final = final.merge(newSP5, on = "Date", how = "outer")
  final.columns = ["Date","Open_BTC",'Adj_Close_BTC',"Change_BTC","Open_DOGE",'Adj_Close_DOGE', "Change_DOGE","Open_ETH",'Adj_Close_ETH',"Change_ETH","Open_SP5",	"Adj_Close_SP5", "Change_SP5"]
  return(final)

dfDrops = nextTwoWeeks(SP5Dates)

changeDfDrops = dfDrops[["Change_BTC","Change_DOGE", "Change_ETH", "Change_SP5"]]
changeDfDrops.corr()

dfDrops2020 = dfDrops.loc[dfDrops["Date"]> "2020-01-01"]
changeDfDrops2020 = dfDrops2020[["Change_BTC","Change_DOGE", "Change_ETH", "Change_SP5"]]
changeDfDrops2020.corr()

dfDrops2020

SP5WeeklyReg = SP5Weekly[["Date","change"]]
SP5WeeklyReg.columns = ["Date", "change_SP5"]

BTCWeeklyReg = BTCWeekly[["Date","change"]]
BTCWeeklyReg.columns = ["Date", "change_BTC"]

DOGEWeeklyReg = DOGEWeekly[["Date","change"]]
DOGEWeeklyReg.columns =  ["Date", "change_DOGE"]

ETHWeeklyReg = ETHWeekly[["Date","change"]]
ETHWeeklyReg.columns = ["Date", "change_ETH"]

RegMerged = SP5WeeklyReg.merge(BTCWeeklyReg, how = "inner", on="Date")
RegMerged = RegMerged.merge(DOGEWeeklyReg, how = "inner", on="Date")
RegMerged = RegMerged.merge(ETHWeeklyReg, how = "inner", on = "Date")

RegMerged.dropna(inplace = True)

RegMerged.corr()

# First Regression Model, SP5 based on Cryptos
X = RegMerged[["change_DOGE","change_ETH","change_BTC"]]
Y = RegMerged[["change_SP5"]]

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2)

from sklearn import linear_model
reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))

print(reg.coef_)
print(reg.intercept_)

pred = reg.predict(X_test)
err = pd.Series(Y_test["change_SP5"]) - [p[0]for p in pred]

err.hist()

reg.score(X_test,Y_test)

len(X_train["change_BTC"])

# model is a poor predictor, lets predicting a crypto based on the others

X = RegMerged[["change_DOGE","change_ETH","change_SP5"]]
Y = RegMerged[["change_BTC"]]

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2)

reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))
print(reg.coef_)
print(reg.intercept_)

pred = reg.predict(X_test)
err = pd.Series(Y_test["change_BTC"]) - [p[0]for p in pred]
err.hist()

reg.score(X_test,Y_test)

# Still scores really poorly, lets go again but with no SP5
X = RegMerged[["change_DOGE","change_ETH"]]
Y = RegMerged[["change_BTC"]]

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2)

reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))
print(reg.coef_)
print(reg.intercept_)

pred = reg.predict(X_test)
err = pd.Series(Y_test["change_BTC"]) - [p[0]for p in pred]
err.hist(bins = 12)

reg.score(X_test,Y_test)

#We do better with only cryptos, lets try to bring some more in
LTC = pdr.get_data_yahoo("LTC-USD", start="2014-01-01", end="2021-10-31")
XLM = pdr.get_data_yahoo("XLM-USD", start="2014-01-01", end="2021-10-31")
BNB = pdr.get_data_yahoo("BNB-USD", start="2014-01-01", end="2021-10-31")
LTC.reset_index(level=0, inplace=True)
XLM.reset_index(level=0, inplace=True)
BNB.reset_index(level=0, inplace=True)

LTCWeekly = WeeklyOutputs(LTC)
XLMWeekly = WeeklyOutputs(XLM)
BNBWeekly = WeeklyOutputs(BNB)

LTCWeeklyReg = LTCWeekly[["Date","change"]]
XLMWeeklyReg = XLMWeekly[["Date","change"]]
BNBWeeklyReg = BNBWeekly[["Date","change"]]

LTCWeeklyReg.columns = ["Date", "change_LTC"]
XLMWeeklyReg.columns = ["Date", "change_XLM"]
BNBWeeklyReg.columns = ["Date", "change_BNB"]

RegMerged = RegMerged.merge(LTCWeeklyReg, how = "inner", on = "Date")
RegMerged = RegMerged.merge(XLMWeeklyReg, how = "inner", on = "Date")
RegMerged = RegMerged.merge(BNBWeeklyReg, how = "inner", on = "Date")
RegMerged.dropna(inplace = True)

RegMerged.corr()

X = RegMerged[["change_DOGE","change_ETH","change_LTC","change_XLM", "change_BNB"]]
Y = RegMerged[["change_BTC"]]

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2)

reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))
print(reg.coef_)
print(reg.intercept_)

pred = reg.predict(X_test)
err = pd.Series(Y_test["change_BTC"]) - [p[0]for p in pred]
err.hist(bins = 8)

import matplotlib.pyplot as plt

plt.figure(figsize = (8,6))
plt.hist(err, label = "Errors", bins = 7)


plt.xlabel("Diff BTC% change")
plt.ylabel("Frequency")
plt.title("Errors Hist")

reg.score(X_test,Y_test)

"""This Model works pretty well

DV -> change_BTC

IVs -> ["change_DOGE","change_ETH","change_LTC","change_XLM", "change_BNB"]

coef, int = [0.00749273 0.20777219 0.34508473 0.03353905 0.03029037]  [0.61363843]

R2 = 0.7091436168580117
"""

len(Y_train["change_BTC"])

RegMerged

RegMerged.dtypes

from datetime import datetime

# Are the coorelations relationships more relevant recently
dateStandard = datetime.strptime("2020-01-01", "%Y-%d-%m")
RegMergedRecent = RegMerged.loc[RegMerged["Date"] >= dateStandard]

RegMergedRecent.corr()

X = RegMergedRecent[["change_DOGE","change_ETH","change_LTC","change_XLM", "change_BNB"]]
Y = RegMergedRecent[["change_BTC"]]

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.15)

reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))
print(reg.coef_)
print(reg.intercept_)

pred = reg.predict(X_test)
err = pd.Series(Y_test["change_BTC"]) - [p[0]for p in pred]
err.hist(bins = 8)

reg.score(X_test,Y_test)

"""Recency Model (after2020)

DV -> change_BTC

IVs -> ["change_DOGE","change_ETH","change_LTC","change_XLM", "change_BNB"]

coef, int -> [-0.01271835  0.13922775  0.4054446   0.08002305  0.06585447] 
[0.94818466]

R2 -> 0.75
"""

dateStandard = datetime.strptime("2019-01-01", "%Y-%d-%m")
RegMergedRecent2 = RegMerged.loc[RegMerged["Date"] >= dateStandard]

RegMergedRecent2.corr()

X = RegMergedRecent2[["change_ETH","change_LTC","change_XLM", "change_BNB"]]
Y = RegMergedRecent2[["change_BTC"]]

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.15)

reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))
print(reg.coef_)
print(reg.intercept_)

pred = reg.predict(X_test)
err = pd.Series(Y_test["change_BTC"]) - [p[0]for p in pred]
err.hist(bins = 8)

import matplotlib.pyplot as plt

plt.figure(figsize = (8,6))
plt.hist(err, label = "Errors", bins = 7)


plt.xlabel("Diff BTC% change")
plt.ylabel("Frequency")
plt.title("Errors Hist")

reg.score(X_test,Y_test)

"""Recency Model (after 2019)

DV -> change_BTC

IVs -> ["change_ETH","change_LTC","change_XLM", "change_BNB"]

coef, int -> [0.14590034 0.39675488 0.0586252  0.09015267]    [0.77216814]

R2 -> 0.76
"""

def BiWeeklyOutputs(data):
  data["Weekday"] = data["Date"].dt.day_name()
  weekly = data.loc[(data["Weekday"]=="Monday")|(data["Weekday"]=="Thursday")]
  weekly["change"] = (weekly["Adj Close"].pct_change())*100
  weekly.drop(["High","Low","Close","Volume","Weekday"], axis=1, inplace = True)
  return(weekly)

LTCBiWeekly = BiWeeklyOutputs(LTC)
XLMBiWeekly = BiWeeklyOutputs(XLM)
BNBBiWeekly = BiWeeklyOutputs(BNB)
SP5BiWeekly = BiWeeklyOutputs(SP5)
BTCBiWeekly = BiWeeklyOutputs(BTC)
DOGEBiWeekly = BiWeeklyOutputs(DOGE)
ETHBiWeekly = BiWeeklyOutputs(ETH)

SP5BiWeeklyReg = SP5BiWeekly[["Date","change"]]
SP5BiWeeklyReg.columns = ["Date", "change_SP5"]

BTCBiWeeklyReg = BTCBiWeekly[["Date","change"]]
BTCBiWeeklyReg.columns = ["Date", "change_BTC"]

DOGEBiWeeklyReg = DOGEBiWeekly[["Date","change"]]
DOGEBiWeeklyReg.columns =  ["Date", "change_DOGE"]

ETHBiWeeklyReg = ETHBiWeekly[["Date","change"]]
ETHBiWeeklyReg.columns = ["Date", "change_ETH"]

LTCBiWeeklyReg = LTCBiWeekly[["Date","change"]]
XLMBiWeeklyReg = XLMBiWeekly[["Date","change"]]
BNBBiWeeklyReg = BNBBiWeekly[["Date","change"]]

LTCBiWeeklyReg.columns = ["Date", "change_LTC"]
XLMBiWeeklyReg.columns = ["Date", "change_XLM"]
BNBBiWeeklyReg.columns = ["Date", "change_BNB"]

BiMerged = SP5BiWeeklyReg.merge(BTCBiWeeklyReg, how = "inner", on="Date")
BiMerged = BiMerged.merge(DOGEBiWeeklyReg, how = "inner", on="Date")
BiMerged = BiMerged.merge(ETHBiWeeklyReg, how = "inner", on = "Date")
BiMerged = BiMerged.merge(LTCBiWeeklyReg, how = "inner", on = "Date")
BiMerged = BiMerged.merge(XLMBiWeeklyReg, how = "inner", on = "Date")
BiMerged = BiMerged.merge(BNBBiWeeklyReg, how = "inner", on = "Date")
BiMerged.dropna(inplace = True)

dateStandard = datetime.strptime("2019-01-01", "%Y-%d-%m")
BiMergedRecent = BiMerged.loc[BiMerged["Date"] >= dateStandard]

BiMergedRecent.corr()

X = BiMergedRecent[["change_ETH","change_LTC", "change_BNB"]]
Y = BiMergedRecent[["change_BTC"]]

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2)

reg = linear_model.LinearRegression()
reg.fit(pd.DataFrame(X_train),pd.DataFrame(Y_train))
print(reg.coef_)
print(reg.intercept_)

pred = reg.predict(X_test)
err = pd.Series(Y_test["change_BTC"]) - [p[0]for p in pred]
err.hist(bins = 8)

import matplotlib.pyplot as plt

plt.figure(figsize = (8,6))
plt.hist(err, label = "Errors", bins = 10)


plt.xlabel("Diff BTC% change")
plt.ylabel("Frequency")
plt.title("Errors Hist")

reg.score(X_test,Y_test)

len(Y_train["change_BTC"])