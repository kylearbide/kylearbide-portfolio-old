# -*- coding: utf-8 -*-
"""Homework 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wEyRe0MurtqVNBeqe0w4Sp20QUJktjHa
"""

import pandas as pd

"""Take 10 candidates and find what packs commited to them and where those packs are located. 
FEC Dataset
Also merge practice files from w3
"""

HCrime = pd.read_csv("hate_crime.csv")

HCrime.head()

HCrime.describe()

zips = pd.read_json("us-zips.json")

zips.head()

zips.fields.count()

candidates = pd.read_csv("ccl.txt", sep="|", header=None)
c_headers = pd.read_csv("ccl_header_file.csv")

c_headers = list(c_headers.columns.values)
candidates.columns = c_headers

candidates.head()

candidates.dtypes

cms = pd.read_csv("cm.txt", sep="|", header=None)
cm_headers = pd.read_csv("cm_header_file.csv")

cm_headers = list(cm_headers.columns.values)
cms.columns = cm_headers

cms.head()

cms.drop(['CAND_ID'], axis = 1, inplace = True)
candidates.drop(['CMTE_DSGN','CMTE_TP'], axis = 1, inplace= True)

candidates_merged = candidates.merge(cms,on = 'CMTE_ID', how = 'left')

candidates_merged.head(10)

c_names = pd.read_csv("cn.txt", sep="|", header=None)
cn_headers = pd.read_csv("cn_header_file.csv")

cn_headers = list(cn_headers.columns.values)
c_names.columns = cn_headers

c_names.head(10)

c_names_new = c_names[['CAND_ID','CAND_NAME','CAND_PTY_AFFILIATION','CAND_OFFICE_ST']]

cand_names_merge = candidates_merged.merge(c_names_new,on = 'CAND_ID', how = 'left')

cand_names_merge.head(10)

cand_names_merge.dropna(subset=['CAND_NAME'], inplace = True)

cand_names_merge.head(10)

# Here we are grouping by the locations of the committees and finding how many candidates are in each location 
cands_per_cmtearea = cand_names_merge.groupby(['CMTE_CITY','CMTE_ST']).agg({'CAND_ID': "nunique"})
cands_per_cmtearea

cands_per_cmtearea.sort_values(by = 'CAND_ID', ascending = False, inplace = True)
cands_per_cmtearea.head(10)
# The largest number of candidates are followed by committees based out of DC, Alexandria, and Houston

#This calculation is very similar except it just located the number of unique committees in each area
cmte_per_cmtearea = cand_names_merge.groupby(['CMTE_CITY','CMTE_ST']).agg({'CMTE_ID': "nunique"})
cmte_per_cmtearea.sort_values(by = 'CMTE_ID', ascending = False, inplace = True)
cmte_per_cmtearea.head(10)

# im curious how often committee IDs and Candidate IDs are repeated/ if they are repeated.
C_ids = cand_names_merge.CAND_ID.value_counts()
C_ids.head(10)

CM_ids = cand_names_merge.CMTE_ID.value_counts()
CM_ids.head(10)

cand_names_merge[cand_names_merge['CAND_ID']== 'P60022118']
# candidate has 10 entries, 4 with different committees and 6 without committees
# I could change the join type to prevent these no committee entries

cand_cmte_merged = candidates.merge(cms,on = 'CMTE_ID', how = 'inner')

cand_cmte_merged = cand_cmte_merged.merge(c_names_new,on = 'CAND_ID', how = 'left')
cand_cmte_merged.dropna(subset=['CAND_NAME'], inplace = True)

C_ids2 = cand_cmte_merged.CAND_ID.value_counts()
C_ids2.head(10)

cand_cmte_merged[cand_cmte_merged['CAND_ID']== 'P60022118']

cand_cmte_merged[cand_cmte_merged['CAND_ID']== 'S2FL00441']
# still some duplicate entries exist which leaves questions
# I think I want to eliminate any enties where CAND_ID, CMTE_ID and CAND_ELECTION_YR are Identical

unique_combos = cand_cmte_merged.drop_duplicates(subset=["CAND_ID","CMTE_ID",'CAND_ELECTION_YR'])
C_ids2 = unique_combos.CAND_ID.value_counts()
C_ids2.head(10)

cand_cmte_merged[cand_cmte_merged['CAND_ID']== 'S4IA00129']
# now it appears every entry is a unique combo of CMTE CAND and YEAR

CMTEParties = unique_combos.CMTE_PTY_AFFILIATION.value_counts()
print(CMTEParties.head(10))
CANDParties = unique_combos.CAND_PTY_AFFILIATION.value_counts()
print(CANDParties.head(10))

diffParty = unique_combos[unique_combos['CAND_PTY_AFFILIATION'] != unique_combos['CMTE_PTY_AFFILIATION']]
diffParty.head(10)
diffParty.count()
# 686 times the candidate and committee have different party affiliations

CMTEParties = diffParty.CMTE_PTY_AFFILIATION.value_counts()
print(CMTEParties.head(10))
CANDParties = diffParty.CAND_PTY_AFFILIATION.value_counts()
print(CANDParties.head(10))